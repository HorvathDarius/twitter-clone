// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// Model for a document representing a tweet
model Tweet {
    id String @id @default(uuid()) //Id using a uuid
    userId String // reference to user
    content String // content of tweet
    createdAt DateTime @default(now()) // creation time

    // Creating a relation betweeen the userId field which will reference the id field from the user
    // and using Cascade on delete, which means when i delete a user delete its tweets
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes Like[]

    @@index([userId])
    @@unique([createdAt, id])
}

model Like {
    userId String   // the user that liked the tweet
    tweetId String  // the tweet that was liked
    user User @relation(fields: [userId],references: [id], onDelete: Cascade)
    Tweet Tweet @relation(fields: [tweetId],references: [id], onDelete: Cascade)

    // making sure that only exists one combination of user id and tweet id, because a user can only like a tweet only once 
    @@id([userId, tweetId])
    @@index([userId])
    @@index([tweetId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Non-NextAuth
    tweets        Tweet[]
    likes         Like[]
    // By giving the same name to this two fields we are saying that they are connected
    // Normally we would need to create an additional table to make this happen but prisma creates that joint table for us
    followers     User[] @relation(name: "Followers")
    follows       User[] @relation(name: "Followers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
